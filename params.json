{"name":"JUNA","tagline":"A JAVA  based Lua Interpreter","body":"### About JUNA\r\n    \r\n> A team effort of students for two weeks. Juna is free software, published under the terms of the GNU General Public License V3. Packages used in Juna are\r\n\r\n* JFLEX - used for scanning the program. [Download Manual](http://www-inst.eecs.berkeley.edu/~cs164/sp08/docs/jflex/manual.pdf). Licensed by GNU General Public License.\r\n* Java CUP Parser - used for parsing the program. [More about CUP parser](http://www2.cs.tum.edu/projects/cup/) .This is an open source license. It is also GPL-Compatible\r\n* [JLine] (Java library for handling console input.) - used for handling the console input. JLine is distributed under the BSD license. \r\n\r\n\r\n### Getting Started\r\n#### *Build Instructions*\r\n*     `ant gen` generates lexer and parser\r\n*     `ant compile` compiles everything\r\n*     `ant jar` bundles everything into a single jar\r\n*     `ant clean` cleans the project\r\n \r\n#### *Interactive/Batch Mode*\r\n**Usage in Batch Mode:**    `java -jar juna.jar [-options] [Lua-File]`\r\nwith following options:\r\n*    `-h`, `-help`   show the Batch-Help\r\n*    `[-i [<file>]]` open Juna in interactive Mode (Default) and if set, execute the given Lua-File (equal to `dofile(<file>)` in the interactive mode)\r\n*    `[-f] <file>`   executes a File in batch Mode (Default for Files) and exit Juna afterwards\r\n \r\n**Usage in Interactive Mode:**\r\n*    `--help`    show the Interactive-Help\r\n*    `--list`    list all available functions in the global environment with a short description\r\n*    `--list <function>` print detailed help for a predefinied function\r\n*    `--env`     list all members (without functions) of the global environment with their types and values\r\n*    `--exit`    leave the interactive mode and exit Juna\r\n*    all other inputs are handled in Lua behavior (in realtime) and probably closing Juna in consequences of an error\r\n \r\n### Architecture\r\nThe interpreter is divided into two modules:\r\n* The Scanner and the Parser that creates an Abstract Syntax Tree out of a Lua Code.\r\n* The Interpreter that steps through the AST and handle the Lua functions and operators\r\n \r\n#### *Scanner and Parser*\r\nThe Scanner (JFLEX) takes an Lua Code, either the current line in the interactive mode or from a file, and produce a Token-Stream. The Parser (Cup) generates out of the Token-Stream together with the different block types provided by Classgen an Abstract Syntax Tree matching the Lua grammar.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}